//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SOMSightServices.EmailServicesReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmailQueue", Namespace="http://schemas.datacontract.org/2004/07/SharedEntities")]
    [System.SerializableAttribute()]
    public partial class EmailQueue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BodyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Body {
            get {
                return this.BodyField;
            }
            set {
                if ((object.ReferenceEquals(this.BodyField, value) != true)) {
                    this.BodyField = value;
                    this.RaisePropertyChanged("Body");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailFrom {
            get {
                return this.EmailFromField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailFromField, value) != true)) {
                    this.EmailFromField = value;
                    this.RaisePropertyChanged("EmailFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailTo {
            get {
                return this.EmailToField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailToField, value) != true)) {
                    this.EmailToField = value;
                    this.RaisePropertyChanged("EmailTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EmailServicesReference.IEmailServices")]
    public interface IEmailServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailServices/SendEmail", ReplyAction="http://tempuri.org/IEmailServices/SendEmailResponse")]
        void SendEmail(SOMSightServices.EmailServicesReference.EmailQueue pEmailInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailServices/SendEmail", ReplyAction="http://tempuri.org/IEmailServices/SendEmailResponse")]
        System.Threading.Tasks.Task SendEmailAsync(SOMSightServices.EmailServicesReference.EmailQueue pEmailInfo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmailServicesChannel : SOMSightServices.EmailServicesReference.IEmailServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmailServicesClient : System.ServiceModel.ClientBase<SOMSightServices.EmailServicesReference.IEmailServices>, SOMSightServices.EmailServicesReference.IEmailServices {
        
        public EmailServicesClient() {
        }
        
        public EmailServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmailServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SendEmail(SOMSightServices.EmailServicesReference.EmailQueue pEmailInfo) {
            base.Channel.SendEmail(pEmailInfo);
        }
        
        public System.Threading.Tasks.Task SendEmailAsync(SOMSightServices.EmailServicesReference.EmailQueue pEmailInfo) {
            return base.Channel.SendEmailAsync(pEmailInfo);
        }
    }
}
