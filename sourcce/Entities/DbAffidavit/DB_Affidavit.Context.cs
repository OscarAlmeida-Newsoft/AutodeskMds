//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Entities.DbAffidavit
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AffidavitModelsConnection : DbContext
    {
        public AffidavitModelsConnection()
            : base("name=AffidavitSPConnection")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<NS_spAdditionalComments_Select_Result> NS_spAdditionalComments_Select(Nullable<int> companyID, Nullable<short> campaignID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("campaignID", campaignID) :
                new ObjectParameter("campaignID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spAdditionalComments_Select_Result>("NS_spAdditionalComments_Select", companyIDParameter, campaignIDParameter);
        }
    
        public virtual ObjectResult<NS_spAnswerCompany_SelectQuestionID_Result> NS_spAnswerCompany_SelectQuestionID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spAnswerCompany_SelectQuestionID_Result>("NS_spAnswerCompany_SelectQuestionID");
        }
    
        public virtual ObjectResult<NS_spCampaign_Select_Result> NS_spCampaign_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spCampaign_Select_Result>("NS_spCampaign_Select");
        }
    
        public virtual ObjectResult<NS_spCompany_Select_Result> NS_spCompany_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spCompany_Select_Result>("NS_spCompany_Select");
        }
    
        public virtual ObjectResult<NS_spCompanyContact_Select_Result> NS_spCompanyContact_Select(Nullable<int> companyId, Nullable<short> campaignID)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("campaignID", campaignID) :
                new ObjectParameter("campaignID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spCompanyContact_Select_Result>("NS_spCompanyContact_Select", companyIdParameter, campaignIDParameter);
        }
    
        public virtual int NS_spCreateNewQuestion(Nullable<int> responseDataTypeID, Nullable<int> relatedQuestionID, string relatedQuestionIDResponse, string questionsxLanguages, Nullable<byte> productFamilyID, Nullable<int> displayOrder)
        {
            var responseDataTypeIDParameter = responseDataTypeID.HasValue ?
                new ObjectParameter("responseDataTypeID", responseDataTypeID) :
                new ObjectParameter("responseDataTypeID", typeof(int));
    
            var relatedQuestionIDParameter = relatedQuestionID.HasValue ?
                new ObjectParameter("relatedQuestionID", relatedQuestionID) :
                new ObjectParameter("relatedQuestionID", typeof(int));
    
            var relatedQuestionIDResponseParameter = relatedQuestionIDResponse != null ?
                new ObjectParameter("relatedQuestionIDResponse", relatedQuestionIDResponse) :
                new ObjectParameter("relatedQuestionIDResponse", typeof(string));
    
            var questionsxLanguagesParameter = questionsxLanguages != null ?
                new ObjectParameter("questionsxLanguages", questionsxLanguages) :
                new ObjectParameter("questionsxLanguages", typeof(string));
    
            var productFamilyIDParameter = productFamilyID.HasValue ?
                new ObjectParameter("productFamilyID", productFamilyID) :
                new ObjectParameter("productFamilyID", typeof(byte));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("displayOrder", displayOrder) :
                new ObjectParameter("displayOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NS_spCreateNewQuestion", responseDataTypeIDParameter, relatedQuestionIDParameter, relatedQuestionIDResponseParameter, questionsxLanguagesParameter, productFamilyIDParameter, displayOrderParameter);
        }
    
        public virtual ObjectResult<NS_spIndustry_Select_Result> NS_spIndustry_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spIndustry_Select_Result>("NS_spIndustry_Select");
        }
    
        public virtual ObjectResult<NS_spLanguages_Select_Result> NS_spLanguages_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spLanguages_Select_Result>("NS_spLanguages_Select");
        }
    
        public virtual ObjectResult<NS_spPartnerCapabilityInfo_Select_Result> NS_spPartnerCapabilityInfo_Select(Nullable<int> companyID, Nullable<short> campaignID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("campaignID", campaignID) :
                new ObjectParameter("campaignID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spPartnerCapabilityInfo_Select_Result>("NS_spPartnerCapabilityInfo_Select", companyIDParameter, campaignIDParameter);
        }
    
        public virtual ObjectResult<NS_spPartnerProgramInfo_Select_Result> NS_spPartnerProgramInfo_Select(Nullable<int> companyID, Nullable<short> campaignID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("campaignID", campaignID) :
                new ObjectParameter("campaignID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spPartnerProgramInfo_Select_Result>("NS_spPartnerProgramInfo_Select", companyIDParameter, campaignIDParameter);
        }
    
        public virtual int NS_spProduct_Delete(Nullable<short> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NS_spProduct_Delete", productIDParameter);
        }
    
        public virtual ObjectResult<NS_spProductCompany_Select_Result> NS_spProductCompany_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spProductCompany_Select_Result>("NS_spProductCompany_Select");
        }
    
        public virtual ObjectResult<NS_spProductFamily_Select_Result> NS_spProductFamily_Select(string producFamilyName)
        {
            var producFamilyNameParameter = producFamilyName != null ?
                new ObjectParameter("ProducFamilyName", producFamilyName) :
                new ObjectParameter("ProducFamilyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spProductFamily_Select_Result>("NS_spProductFamily_Select", producFamilyNameParameter);
        }
    
        public virtual ObjectResult<NS_spProductFamily_SelectAll_Result> NS_spProductFamily_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spProductFamily_SelectAll_Result>("NS_spProductFamily_SelectAll");
        }
    
        public virtual ObjectResult<NS_spProductFamilyCompany_Select_Result> NS_spProductFamilyCompany_Select(Nullable<int> companyID, Nullable<short> campaignID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("campaignID", campaignID) :
                new ObjectParameter("campaignID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spProductFamilyCompany_Select_Result>("NS_spProductFamilyCompany_Select", companyIDParameter, campaignIDParameter);
        }
    
        public virtual int NS_spQuestion_Delete(Nullable<int> questionID)
        {
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("questionID", questionID) :
                new ObjectParameter("questionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NS_spQuestion_Delete", questionIDParameter);
        }
    
        public virtual int NS_spQuestion_Insert(Nullable<int> responseDataTypeID, Nullable<int> relatedQuestionID, string relatedQuestionIDResponse)
        {
            var responseDataTypeIDParameter = responseDataTypeID.HasValue ?
                new ObjectParameter("responseDataTypeID", responseDataTypeID) :
                new ObjectParameter("responseDataTypeID", typeof(int));
    
            var relatedQuestionIDParameter = relatedQuestionID.HasValue ?
                new ObjectParameter("relatedQuestionID", relatedQuestionID) :
                new ObjectParameter("relatedQuestionID", typeof(int));
    
            var relatedQuestionIDResponseParameter = relatedQuestionIDResponse != null ?
                new ObjectParameter("relatedQuestionIDResponse", relatedQuestionIDResponse) :
                new ObjectParameter("relatedQuestionIDResponse", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NS_spQuestion_Insert", responseDataTypeIDParameter, relatedQuestionIDParameter, relatedQuestionIDResponseParameter);
        }
    
        public virtual ObjectResult<NS_spQuestion_SelectByLanguage_Result> NS_spQuestion_SelectByLanguage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spQuestion_SelectByLanguage_Result>("NS_spQuestion_SelectByLanguage");
        }
    
        public virtual int NS_spQuestion_Update(Nullable<int> questionID, Nullable<int> responseDataTypeID, Nullable<int> relatedQuestionID, string relatedQuestionIDResponse)
        {
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("questionID", questionID) :
                new ObjectParameter("questionID", typeof(int));
    
            var responseDataTypeIDParameter = responseDataTypeID.HasValue ?
                new ObjectParameter("responseDataTypeID", responseDataTypeID) :
                new ObjectParameter("responseDataTypeID", typeof(int));
    
            var relatedQuestionIDParameter = relatedQuestionID.HasValue ?
                new ObjectParameter("relatedQuestionID", relatedQuestionID) :
                new ObjectParameter("relatedQuestionID", typeof(int));
    
            var relatedQuestionIDResponseParameter = relatedQuestionIDResponse != null ?
                new ObjectParameter("relatedQuestionIDResponse", relatedQuestionIDResponse) :
                new ObjectParameter("relatedQuestionIDResponse", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NS_spQuestion_Update", questionIDParameter, responseDataTypeIDParameter, relatedQuestionIDParameter, relatedQuestionIDResponseParameter);
        }
    
        public virtual ObjectResult<NS_spQuestionByID_Select_Result> NS_spQuestionByID_Select(Nullable<int> questionID)
        {
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("questionID", questionID) :
                new ObjectParameter("questionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spQuestionByID_Select_Result>("NS_spQuestionByID_Select", questionIDParameter);
        }
    
        public virtual int NS_spQuestionByLanguage(Nullable<int> questionId, Nullable<int> languageID, string questionText)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("languageID", languageID) :
                new ObjectParameter("languageID", typeof(int));
    
            var questionTextParameter = questionText != null ?
                new ObjectParameter("questionText", questionText) :
                new ObjectParameter("questionText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NS_spQuestionByLanguage", questionIdParameter, languageIDParameter, questionTextParameter);
        }
    
        public virtual ObjectResult<NS_spQuestionByLanguage_Select_Result> NS_spQuestionByLanguage_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spQuestionByLanguage_Select_Result>("NS_spQuestionByLanguage_Select");
        }
    
        public virtual int NS_spQuestionxLanguage_Delete(Nullable<int> questionID)
        {
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("questionID", questionID) :
                new ObjectParameter("questionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NS_spQuestionxLanguage_Delete", questionIDParameter);
        }
    
        public virtual int NS_spQuestionxLanguage_Update(Nullable<int> questionID, Nullable<int> languageID, string questionText)
        {
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("questionID", questionID) :
                new ObjectParameter("questionID", typeof(int));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("languageID", languageID) :
                new ObjectParameter("languageID", typeof(int));
    
            var questionTextParameter = questionText != null ?
                new ObjectParameter("questionText", questionText) :
                new ObjectParameter("questionText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NS_spQuestionxLanguage_Update", questionIDParameter, languageIDParameter, questionTextParameter);
        }
    
        public virtual int NS_spQuestionxProductFamily_Delete(Nullable<int> questionID)
        {
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("questionID", questionID) :
                new ObjectParameter("questionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NS_spQuestionxProductFamily_Delete", questionIDParameter);
        }
    
        public virtual int NS_spQuestionxProductFamily_Insert(Nullable<int> questionID, Nullable<byte> productFamilyID, Nullable<int> displayOrder)
        {
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("questionID", questionID) :
                new ObjectParameter("questionID", typeof(int));
    
            var productFamilyIDParameter = productFamilyID.HasValue ?
                new ObjectParameter("productFamilyID", productFamilyID) :
                new ObjectParameter("productFamilyID", typeof(byte));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("displayOrder", displayOrder) :
                new ObjectParameter("displayOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NS_spQuestionxProductFamily_Insert", questionIDParameter, productFamilyIDParameter, displayOrderParameter);
        }
    
        public virtual ObjectResult<NS_spQuestionxProductFamily_Select_Result> NS_spQuestionxProductFamily_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spQuestionxProductFamily_Select_Result>("NS_spQuestionxProductFamily_Select");
        }
    
        public virtual int NS_spQuestionxProductFamily_Update(Nullable<byte> productFamilyID, Nullable<int> questionID, Nullable<int> displayOrder, Nullable<int> isActive)
        {
            var productFamilyIDParameter = productFamilyID.HasValue ?
                new ObjectParameter("productFamilyID", productFamilyID) :
                new ObjectParameter("productFamilyID", typeof(byte));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("questionID", questionID) :
                new ObjectParameter("questionID", typeof(int));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("displayOrder", displayOrder) :
                new ObjectParameter("displayOrder", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NS_spQuestionxProductFamily_Update", productFamilyIDParameter, questionIDParameter, displayOrderParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<NS_spResponseDataType_Select_Result> NS_spResponseDataType_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spResponseDataType_Select_Result>("NS_spResponseDataType_Select");
        }
    
        public virtual ObjectResult<NS_spProductInfo_Select_Result> NS_spProductInfo_Select(Nullable<int> companyID, Nullable<short> campaignID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("campaignID", campaignID) :
                new ObjectParameter("campaignID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spProductInfo_Select_Result>("NS_spProductInfo_Select", companyIDParameter, campaignIDParameter);
        }
    
        public virtual ObjectResult<NS_spCountry_Select_Result> NS_spCountry_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spCountry_Select_Result>("NS_spCountry_Select");
        }
    
        public virtual int NS_spCreateLetterLatam(Nullable<System.Guid> createdById, string landingText, Nullable<int> countryId, string campaign, ObjectParameter notSave)
        {
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("createdById", createdById) :
                new ObjectParameter("createdById", typeof(System.Guid));
    
            var landingTextParameter = landingText != null ?
                new ObjectParameter("landingText", landingText) :
                new ObjectParameter("landingText", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            var campaignParameter = campaign != null ?
                new ObjectParameter("campaign", campaign) :
                new ObjectParameter("campaign", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NS_spCreateLetterLatam", createdByIdParameter, landingTextParameter, countryIdParameter, campaignParameter, notSave);
        }
    
        public virtual int NS_spAnswerCompany_QuestionResponses(Nullable<int> companyID, Nullable<short> campaignID, Nullable<int> languageID, Nullable<byte> productFamilyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("CampaignID", campaignID) :
                new ObjectParameter("CampaignID", typeof(short));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(int));
    
            var productFamilyIDParameter = productFamilyID.HasValue ?
                new ObjectParameter("ProductFamilyID", productFamilyID) :
                new ObjectParameter("ProductFamilyID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NS_spAnswerCompany_QuestionResponses", companyIDParameter, campaignIDParameter, languageIDParameter, productFamilyIDParameter);
        }
    
        public virtual int NS_spProduct_Create(string productName, string productVersion, Nullable<byte> productFamilyID, string productVersionGroup, Nullable<bool> oEMFlag, Nullable<short> orderVersion, Nullable<bool> isActive, string productNameDisplay, Nullable<bool> isCAL, Nullable<bool> isCommercial, Nullable<bool> isCorporate, Nullable<bool> isSupported, Nullable<short> displayOrder)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var productVersionParameter = productVersion != null ?
                new ObjectParameter("productVersion", productVersion) :
                new ObjectParameter("productVersion", typeof(string));
    
            var productFamilyIDParameter = productFamilyID.HasValue ?
                new ObjectParameter("productFamilyID", productFamilyID) :
                new ObjectParameter("productFamilyID", typeof(byte));
    
            var productVersionGroupParameter = productVersionGroup != null ?
                new ObjectParameter("productVersionGroup", productVersionGroup) :
                new ObjectParameter("productVersionGroup", typeof(string));
    
            var oEMFlagParameter = oEMFlag.HasValue ?
                new ObjectParameter("OEMFlag", oEMFlag) :
                new ObjectParameter("OEMFlag", typeof(bool));
    
            var orderVersionParameter = orderVersion.HasValue ?
                new ObjectParameter("orderVersion", orderVersion) :
                new ObjectParameter("orderVersion", typeof(short));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var productNameDisplayParameter = productNameDisplay != null ?
                new ObjectParameter("productNameDisplay", productNameDisplay) :
                new ObjectParameter("productNameDisplay", typeof(string));
    
            var isCALParameter = isCAL.HasValue ?
                new ObjectParameter("isCAL", isCAL) :
                new ObjectParameter("isCAL", typeof(bool));
    
            var isCommercialParameter = isCommercial.HasValue ?
                new ObjectParameter("isCommercial", isCommercial) :
                new ObjectParameter("isCommercial", typeof(bool));
    
            var isCorporateParameter = isCorporate.HasValue ?
                new ObjectParameter("isCorporate", isCorporate) :
                new ObjectParameter("isCorporate", typeof(bool));
    
            var isSupportedParameter = isSupported.HasValue ?
                new ObjectParameter("isSupported", isSupported) :
                new ObjectParameter("isSupported", typeof(bool));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("displayOrder", displayOrder) :
                new ObjectParameter("displayOrder", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NS_spProduct_Create", productNameParameter, productVersionParameter, productFamilyIDParameter, productVersionGroupParameter, oEMFlagParameter, orderVersionParameter, isActiveParameter, productNameDisplayParameter, isCALParameter, isCommercialParameter, isCorporateParameter, isSupportedParameter, displayOrderParameter);
        }
    
        public virtual int NS_spProduct_Update(Nullable<short> productID, string productName, string productVersion, Nullable<byte> productFamilyID, string productVersionGroup, Nullable<bool> oEMFlag, Nullable<short> orderVersion, Nullable<bool> isActive, string productNameDisplay, Nullable<bool> isCAL, Nullable<bool> isCommercial, Nullable<bool> isCorporate, Nullable<bool> isSupported, Nullable<short> displayOrder)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(short));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var productVersionParameter = productVersion != null ?
                new ObjectParameter("productVersion", productVersion) :
                new ObjectParameter("productVersion", typeof(string));
    
            var productFamilyIDParameter = productFamilyID.HasValue ?
                new ObjectParameter("productFamilyID", productFamilyID) :
                new ObjectParameter("productFamilyID", typeof(byte));
    
            var productVersionGroupParameter = productVersionGroup != null ?
                new ObjectParameter("productVersionGroup", productVersionGroup) :
                new ObjectParameter("productVersionGroup", typeof(string));
    
            var oEMFlagParameter = oEMFlag.HasValue ?
                new ObjectParameter("OEMFlag", oEMFlag) :
                new ObjectParameter("OEMFlag", typeof(bool));
    
            var orderVersionParameter = orderVersion.HasValue ?
                new ObjectParameter("orderVersion", orderVersion) :
                new ObjectParameter("orderVersion", typeof(short));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var productNameDisplayParameter = productNameDisplay != null ?
                new ObjectParameter("productNameDisplay", productNameDisplay) :
                new ObjectParameter("productNameDisplay", typeof(string));
    
            var isCALParameter = isCAL.HasValue ?
                new ObjectParameter("isCAL", isCAL) :
                new ObjectParameter("isCAL", typeof(bool));
    
            var isCommercialParameter = isCommercial.HasValue ?
                new ObjectParameter("isCommercial", isCommercial) :
                new ObjectParameter("isCommercial", typeof(bool));
    
            var isCorporateParameter = isCorporate.HasValue ?
                new ObjectParameter("isCorporate", isCorporate) :
                new ObjectParameter("isCorporate", typeof(bool));
    
            var isSupportedParameter = isSupported.HasValue ?
                new ObjectParameter("isSupported", isSupported) :
                new ObjectParameter("isSupported", typeof(bool));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("displayOrder", displayOrder) :
                new ObjectParameter("displayOrder", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NS_spProduct_Update", productIDParameter, productNameParameter, productVersionParameter, productFamilyIDParameter, productVersionGroupParameter, oEMFlagParameter, orderVersionParameter, isActiveParameter, productNameDisplayParameter, isCALParameter, isCommercialParameter, isCorporateParameter, isSupportedParameter, displayOrderParameter);
        }
    
        public virtual ObjectResult<NS_spProduct_SelectID_Result> NS_spProduct_SelectID(Nullable<short> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spProduct_SelectID_Result>("NS_spProduct_SelectID", productIDParameter);
        }
    
        public virtual ObjectResult<NS_spCompanyInfo_Select_Result> NS_spCompanyInfo_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spCompanyInfo_Select_Result>("NS_spCompanyInfo_Select");
        }
    
        public virtual ObjectResult<NS_spProduct_Select_Result> NS_spProduct_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NS_spProduct_Select_Result>("NS_spProduct_Select");
        }
    }
}
