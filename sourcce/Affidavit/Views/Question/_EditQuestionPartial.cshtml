@model Affidavit.Models.Question.CreateNewQuestionViewModel
@using Affidavit.Utils
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

<style type="text/css">
    .requiredMessage {
        float: right;
        margin: -3px 80px 0px 0px;
        padding: 0px 0px 10px 0px;
    }
</style>

<div id="pagina">
    @*@using (Html.BeginForm("UpdateQuestion", "Question", FormMethod.Post))
        {*@
    @Html.HiddenFor(x => x.CurrentQuestionID)
    @Html.HiddenFor(x => x.ProductFamilyID)
    @Html.HiddenFor(x => x.ResponseDataTypeID)

    <div class="form-group">
        @Html.LabelFor(model => model.ResponseDataTypeID, new { @class = "col-sm-5 control-label", style = "margin-bottom: 12px !important;" })
        @*@Html.TextBoxFor(model => model.ResponseDataTypeID, new { @class = "form-control", @disabled = "disabled" })*@
        @if ((Model.ExisteID == true))
        {
            @Html.DropDownListFor(model => model.ResponseDataTypeID, Model.ResponseDataTypeList, new { @class = "form-control", @disabled = "disabled", style = "margin-bottom: 12px !important;" })
        }
        else
        {
            @Html.DropDownListFor(model => model.ResponseDataTypeID, Model.ResponseDataTypeList, new { @class = "form-control", style = "margin-bottom: 12px !important;" })
        }
        @Html.ValidationMessageFor(model => model.ResponseDataTypeID, "", new { @class = "text-danger requiredMessage" })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ProductFamilyID, new { @class = "col-sm-5 control-label", style = "margin-bottom: 12px !important;" })
        @Html.DropDownListFor(model => model.ProductFamilyID, Model.ProductFamilyList, new { @class = "form-control", @disabled = "disabled", style = "margin-bottom: 12px !important;" })
        @Html.ValidationMessageFor(model => model.ProductFamilyID, "", new { @class = "text-danger requiredMessage" })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.RelatedQuestionIDResponse, new { @class = "col-sm-5 control-label", style = "margin-bottom: 12px !important;" })
        @Html.DropDownListFor(model => model.RelatedQuestionIDResponse,
        new[]
        {
            new SelectListItem{ Value = "0", Text = "False" },
            new SelectListItem{ Value = "1", Text = "True" }

        }, new { @class = "form-control", style = "margin-bottom: 12px !important;" })
        @*@Html.ValidationMessageFor(model => model.LanguageID)*@
    </div>
    <div class="form-group response">
        @Html.LabelFor(model => model.RelatedQuestionID, new { @class = "col-sm-5 control-label", style = "margin-bottom: 12px !important;" })
        @Html.DropDownListFor(model => model.RelatedQuestionID, Model.RelatedQuestionList, "--Select One--", new { @class = "form-control", style = "margin-bottom: 12px !important;" })
        @*@Html.ValidationMessageFor(model => model.RelatedQuestionID)*@
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Order, new { @class = "col-sm-5 control-label" })
        @Html.TextBox("Order", Model.Order, new { @class = "form-control integerOnly", @type = "number", @min = 1 })
        @Html.ValidationMessageFor(model => model.Order, "", new { @class = "text-danger requiredMessage" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ActiveFlag, new { @class = "col-sm-5 control-label dropdownSeparation" })
        @*@Html.EnumDropDownListFor(x , new SelectList(EnumHelper.GetSelectList(typeof(ActiveFlag))), new { @class = "form-control" })*@
        @Html.EnumDropDownListFor(x => x.ActiveFlag, new { @class = "form-control dropdownSeparation" })

    </div>
    <br />

    <table border="0" cellspacing="0" cellpadding="0" class="especial_03 table-bordered">
        <tr class="cabezote">
            <th class="bg-success thSize" style="width: 90px !important;">@TranslatorHelper.TranslateTextByIdentifier("Old_LabelIdioma")</th>
            <th class="bg-success thSize">@TranslatorHelper.TranslateTextByIdentifier("Old_LabelQuestionText")</th>
        </tr>

        @{ var k = 0; }
        @foreach (var item in Model.Languages)
        {
            <tr>
                <th style="width: 90px !important;">@Html.Label(@item.LanguageName, new { style = "text-align: center !important;" })</th>
                <td>
                    @Html.TextBox("LanguagesQuestionsText[" + k + "]", Model.LanguagesQuestionsText[k], new { @class = "form-control", required = "required"@*, style = "margin-left: 100px;"*@ })
                    @Html.ValidationMessageFor(m => m.QuestionsxLanguages[k].QuestionText, "", new { @class = "text-danger requiredMessage"@*, style = "margin-top: 10px; margin-right: 100px;"*@ })
                    @Html.Hidden("LanguagesID[" + k + "]", item.LanguageID)
                </td>
            </tr>
            k++;
        }

    </table>
</div>
    @*<button type="button" class="btn" id="cancelEdit" style="height:inherit !important;">@TranslatorHelper.TranslateTextByIdentifier("Old_LabelCancel")</button>
    <button type="submit" class="btn btn-primary" style="height:inherit !important;">@TranslatorHelper.TranslateTextByIdentifier("Old_LabelSave")</button>*@
            @*}*@
